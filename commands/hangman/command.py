import discord
import logging
import random
import utils.helper as helper
import commands.ext.games as games
import commands.hangman as hangman
from discord.ext import commands

logger = logging.getLogger(__name__)


class HangmanCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.manager = bot.get_cog('GameManager')
        self.themes = hangman.data.themes()

    @commands.check_any(commands.guild_only())
    @commands.group(name="–≤–∏—Å–µ–ª–∏—Ü–∞", help="–∏–≥—Ä–∞", invoke_without_command=True)
    async def execute(self, ctx, theme: str):
        theme = theme.capitalize()
        if not theme in self.themes:
            return await ctx.send(embed=helper.get_error_embed(desc="–î–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"))
        word = hangman.HangmanWord(random.choice(self.themes[theme]))

        session = games.GameSession(
            self.manager, None, 2, 8, 1, theme=theme, word=word, errors=0)
        session.players.append(games.GamePlayer(ctx.author, guesses=0))
        session.message = await ctx.send(embed=self.launch_embed(session))
        await session.message.add_reaction('üö™')
        session.add_handler('on_message', self.on_message)
        session.add_handler('on_reaction_add', self.on_reaction_add)
        self.manager.add_session(session)

    @execute.command(name="—Ç–µ–º—ã")
    async def send_themes(self, ctx):
        description = ""
        for theme, words in self.themes.items():
            description += f"**{theme}**: {len(words)} —Å–ª–æ–≤\n"
        await ctx.send(embed=discord.Embed(title="üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã", description=description, colour=discord.Color.blue()))

    async def on_reaction_add(self, session, reaction, user):
        emoji = reaction.emoji
        players = session.players
        if session.launched:
            return
        if emoji == 'üö™' and not session.launched:
            if user in players:
                return
            players.append(games.GamePlayer(user, guesses=0))
            embed = self.launch_embed(session)
            if players.ready:
                await session.message.add_reaction('‚ñ∂Ô∏è')
        elif emoji == '‚ñ∂Ô∏è' and players.ready and user == players.current.user:
            session.launch()
            await session.message.clear_reactions()
            embed = self.guessing_embed(
                "‚≠ê –ú–∞—Ç—á –Ω–∞—á–∞–ª—Å—è! –ß—Ç–æ–±—ã –ø–æ—Ö–æ–¥–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –±—É–∫–≤—É!", session)
        await session.message.edit(embed=embed)

    async def on_message(self, session, message, user):
        players = session.players
        content = message.content
        word = session.word

        if not session.launched or not word.can_guess(content):
            return
        if not user == players.current.user:
            return

        player = players.current
        guesses = word.guess(content) if len(
            content) == 1 else word.guess_completely(content)
        if guesses > 0:
            player.guesses += guesses
        else:
            players.pop()
            session.errors += 1
            # –ò–≥—Ä–æ–∫ –ø—ã—Ç–∞–ª—Å—è –æ—Ç–≥–∞–¥–∞—Ç—å —Ü–µ–ª–æ–µ —Å–ª–æ–≤–æ
            if len(content) > 1:
                players.ignore(player)

        if players.lost or (session.errors == len(hangman.data.hangmans)-1 and not word.completed):
            session.close()
            embed = self.ended_embed("–ú–∞—Ç—á –ø—Ä–æ–∏–≥—Ä–∞–Ω... ü§¶", False, session)
            embed.colour = discord.Color.red()
        elif word.completed:
            session.close()
            players.set_winner(player)
            embed = self.ended_embed("–ú–∞—Ç—á –≤—ã–∏–≥—Ä–∞–Ω! ‚úåÔ∏è", True, session)
            embed.colour = discord.Color.green()
        elif guesses > 0:
            description = f"{player.mention} –≤—ã–±–∏—Ä–∞–µ—Ç **{content.upper()}** –∏ —É–≥–∞–¥—ã–≤–∞–µ—Ç ‚òëÔ∏è"
            embed = self.guessing_embed(description, session)
        # –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º
        elif player.ignored:
            description = f"{player.mention} –≤—ã–±–∏—Ä–∞–µ—Ç **{content.upper()}** –∏ –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã ‚ôø"
            embed = self.guessing_embed(description, session)
        else:
            description = f"{player.mention} –≤—ã–±–∏—Ä–∞–µ—Ç **{content.upper()}** –∏ –æ—à–∏–±–∞–µ—Ç—Å—è üôÖ‚Äç‚ôÇÔ∏è"
            embed = self.guessing_embed(description, session)
        await message.delete()
        await session.message.edit(embed=embed)

    def launch_embed(self, session):
        players = session.players
        description = f"–ú–∞—Ç—á –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ **{session.theme}**\n\n"

        for player in players:
            description += f"‚òëÔ∏è {player.name}\n"
        if not session.full:
            description += f"\n–ù–∞–∂–º–∏—Ç–µ üö™, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!\n"
        if players.ready:
            description += f"{players.current.name}, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–∂–º–∏—Ç–µ ‚ñ∂Ô∏è"
        embed = discord.Embed(
            title="–í–∏—Å–µ–ª–∏—Ü–∞", description=description, colour=discord.Color.blue())
        return embed

    def guessing_embed(self, desc, session):
        embed = discord.Embed(
            title="–í–∏—Å–µ–ª–∏—Ü–∞", description=desc, colour=discord.Color.blue())
        embed.add_field(name="\u200b", value=hangman.data.hangmans[session.errors], inline=False)
        embed.add_field(name="–¢–µ–∫—É—â–∏–π —Ö–æ–¥",
                        value=session.players.current.mention, inline=False)
        if session.word.used:
            embed.add_field(name="–£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏", value=", ".join(
                str(letter).upper() for letter in session.word.used), inline=False)
        embed.add_field(name="–°–ª–æ–≤–æ",
                        value=session.word.formatted_encrypted, inline=False)
        return embed

    def ended_embed(self, desc, win, session):
        embed = discord.Embed(
            title="–í–∏—Å–µ–ª–∏—Ü–∞", description=desc, colour=discord.Color.green() if win else discord.Color.red())
        embed.add_field(name="\u200b", value=hangman.data.happy_hangman if win else hangman.data.hangmans[len(hangman.data.hangmans)-1], inline=False)
        results = ""
        for player in sorted(session.players, key=lambda p: p.guesses, reverse=True):
            results += f"**{player.name}** - {player.guesses}"
            results += " üèÜ\n" if player.winner else "\n"
        embed.add_field(name="–°—á–µ—Ç:", value=results, inline=False)
        embed.add_field(
            name="–°–ª–æ–≤–æ", value=session.word.formatted_original, inline=False)
        return embed

    async def cog_command_error(self, ctx, error):
        if isinstance(error, commands.MissingRequiredArgument):
            return await ctx.send(embed=helper.get_error_embed(desc="–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É"))
        if isinstance(error, commands.CheckAnyFailure):
            return await ctx.send(embed=helper.get_error_embed(desc="–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö"))
        logger.exception(error)


def setup(bot):
    bot.add_cog(HangmanCommand(bot))
