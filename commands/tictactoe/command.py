from discord.ext import commands
import discord, logging
from utils.helper import get_discord_color, get_error_embed

from commands.tictactoe.manager import GameManager
from commands.tictactoe.grid import GameGrid

logger = logging.getLogger('discord') 

class TicTacToe(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.manager = GameManager()

    @commands.command(name = "—Ç–∏–∫", help = "–∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!")
    async def execute(self, ctx):
        grid = GameGrid()
        embed = discord.Embed(title = "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", description = str(grid), colour = get_discord_color('info'))
        message = await ctx.send(embed = embed)
        for i in range(len(grid.matrix)):
            for j in range(len(grid.matrix[i])):
                emoji = grid.matrix[i][j]['emoji']
                await message.add_reaction(emoji)
        self.manager.add_session(id = message.id, grid = grid)

    @commands.Cog.listener()
    async def on_reaction_add(self, reaction, user):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–µ–±—è (–±–æ—Ç–∞)
        if user == self.bot.user:
            return
        message = reaction.message
        session = self.manager.sessions.get(message.id, None)
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ —Å–µ—Å—Å–∏—è –∏–≥—Ä—ã
        if not session:
            return
        grid = session.grid
        # –í –∫–ª–µ—Ç–∫—É —É–∂–µ –ø–æ—Ö–æ–¥–∏–ª–∏
        if not grid.has(reaction.emoji):
            return
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        player = session.move_current_player(user)
        # –¢–µ–∫—É—â–∏–π —é–∑–µ—Ä - –Ω–µ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫
        if not player:
            return
        await message.clear_reaction(reaction.emoji)
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏ —ç–º–æ–¥–∂–∏ —Ö–æ–¥–∞
        player_type = session.get_player_type(player)
        player_emoji = self.manager.get_player_emoji_move(player_type)
        # –ü–æ–º–µ—á–∞–µ–º –Ω–∞ –ø–æ–ª–µ
        grid.set(player_type, player_emoji, reaction.emoji)
        embed = discord.Embed(title = "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", description = str(grid), colour = get_discord_color('info'))
        first_player = session.get_player('first')
        second_player = session.get_player('second')
        embed.add_field(name = "–ò–≥—Ä–æ–∫ ‚Ññ1", value = "–û–∂–∏–¥–∞–µ—Ç—Å—è" if first_player == None else "<@!{}>".format(first_player.id))
        embed.add_field(name = "–ò–≥—Ä–æ–∫ ‚Ññ2", value = "–û–∂–∏–¥–∞–µ—Ç—Å—è" if second_player == None else "<@!{}>".format(second_player.id))
        player_winner = self.manager.check_for_winner(session)
        if player_winner:
            embed.add_field(name = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:", value = "<@!{}>".format(player_winner.id), inline = False)
            embed.colour = get_discord_color('success')
        elif self.manager.check_for_draw(session):
            embed.add_field(name = "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", value = "üçª –ù–∏—á—å—è!", inline = False)
            embed.colour = get_discord_color('warning')
        else:
            player_next = first_player if (second_player == player) else second_player
            if player_next:
                move_emoji = self.manager.get_player_emoji_move(session.get_player_type(player_next))
                embed.add_field(name = "–¢–µ–∫—É—â–∏–π —Ö–æ–¥", value = "{} ({})".format("<@!{}>".format(player_next.id), move_emoji), inline = False)
        await message.edit(embed = embed)

    @commands.Cog.listener()
    async def on_message_delete(self, message):
        session = self.manager.sessions.get(message.id, None)
        if session:
           self.manager.delete_session(message.id)
           
    async def cog_command_error(self, ctx, error):
        if isinstance(error, commands.BadArgument):
            return await ctx.send(embed = get_error_embed(desc = "–†–∞–∑–º–µ—Ä –ø–æ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"))
        logger.exception(error)
        await ctx.send(embed = get_error_embed(desc = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!"))

def setup(bot):
    bot.add_cog(TicTacToe(bot))