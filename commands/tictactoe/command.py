from discord.ext import commands
import discord
import logging
import utils.helper as helper

from commands.tictactoe.manager import GameManager
from commands.tictactoe.grid import GameGrid

logger = logging.getLogger(__name__)

class TicTacToe(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.manager = GameManager()

    @commands.command(name="—Ç–∏–∫", help="–∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!")
    @commands.check_any(commands.guild_only())
    async def execute(self, ctx):
        grid = GameGrid()

        embed = discord.Embed(
            title="–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", description=str(grid), colour=helper.get_discord_color('info'))
        embed.set_footer(text="‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        message = await ctx.send(embed=embed)

        for i in range(len(grid.matrix)):
            for j in range(len(grid.matrix[i])):
                emoji = grid.matrix[i][j]['emoji']
                await message.add_reaction(emoji)

        embed.set_footer(text="üëÄ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...")
        await message.edit(embed=embed)
        self.manager.add_session(message_id=message.id, grid=grid)

    @commands.Cog.listener()
    async def on_reaction_add(self, reaction, user):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–µ–±—è (–±–æ—Ç–∞)
        if user == self.bot.user:
            return
        message = reaction.message
        session = self.manager.sessions.get(message.id, None)
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ —Å–µ—Å—Å–∏—è –∏–≥—Ä—ã
        if not session:
            return
        grid = session.grid
        # –í –∫–ª–µ—Ç–∫—É —É–∂–µ –ø–æ—Ö–æ–¥–∏–ª–∏
        if not grid.has(reaction.emoji):
            return
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        player = session.move_next(user)
        # –¢–µ–∫—É—â–∏–π —é–∑–µ—Ä - –Ω–µ (—Ç–µ–∫—É—â–∏–π) –∏–≥—Ä–æ–∫
        if not player:
            return
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —è—á–µ–π–∫–æ–π
        await message.clear_reaction(reaction.emoji)
        # –ü–æ–º–µ—á–∞–µ–º –Ω–∞ –ø–æ–ª–µ
        grid.replace(reaction.emoji, player.emoji)

        embed = discord.Embed(
            title="–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", description=str(grid), colour=helper.get_discord_color('info'))

        embed.add_field(name="–ò–≥—Ä–æ–∫ ‚Ññ1",
                        value="<@!{}>".format(session.first.user.id))
        embed.add_field(name="–ò–≥—Ä–æ–∫ ‚Ññ2", value="–û–∂–∏–¥–∞–µ—Ç—Å—è" if not session.ready(
        ) else "<@!{}>".format(session.second.user.id))

        winner = self.manager.check_for_winner(session)
        if winner:
            embed.add_field(name="üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:",
                            value="<@!{}>".format(winner.user.id), inline=False)
            embed.colour = helper.get_discord_color('success')
            self.manager.delete_session(message.id)
        elif self.manager.check_for_draw(session):
            embed.add_field(name="–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                            value="üçª –ù–∏—á—å—è!", inline=False)
            embed.colour = helper.get_discord_color('warning')
            self.manager.delete_session(message.id)
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ —Å–ª–µ–¥ –∏–≥—Ä–æ–∫–µ
            pnext = session.first if session.previous == session.second else session.second
            if pnext:
                embed.add_field(name="–¢–µ–∫—É—â–∏–π —Ö–æ–¥", value="{} ({})".format(
                    "<@!{}>".format(pnext.user.id), pnext.emoji), inline=False)
        await message.edit(embed=embed)

    @commands.Cog.listener()
    async def on_message_delete(self, message):
        session = self.manager.sessions.get(message.id, None)
        if session:
            self.manager.delete_session(message.id)

    async def cog_command_error(self, ctx, error):
        if isinstance(error, commands.BadArgument):
            return await ctx.send(embed=helper.get_error_embed(desc="–†–∞–∑–º–µ—Ä –ø–æ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"))
        if isinstance(error, commands.CheckAnyFailure):
            return await ctx.send(embed=helper.get_error_embed(desc="–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö"))
        logger.exception(error)


def setup(bot):
    bot.add_cog(TicTacToe(bot))
