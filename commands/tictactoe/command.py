import discord
import logging

import utils.helper as helper

from commands.tictactoe.grid import GameGrid
import commands.ext.games.wrapper as games

from discord.ext import commands

logger = logging.getLogger(__name__)

emojis = [ '‚ùå', '‚≠ï' ]

class TicTacToe(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.manager = games.GameManager([ 'playing', 'draw', 'won' ])

    @commands.command(name="—Ç–∏–∫", help="–∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!")
    @commands.check_any(commands.guild_only())
    async def execute(self, ctx):
        grid = GameGrid()

        embed = discord.Embed(
            title="–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", description=str(grid), colour=helper.get_discord_color('info'))
        embed.set_footer(text="‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        message = await ctx.send(embed=embed)

        for i in range(len(grid.matrix)):
            for j in range(len(grid.matrix[i])):
                emoji = grid.matrix[i][j]['emoji']
                await message.add_reaction(emoji)

        embed.set_footer(text="üëÄ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...")
        await message.edit(embed=embed)
        session = self.manager.add_session(message, 2, 2, 1, grid=grid)
        # –°—Ä–∞–∑—É –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ñ–ª–∞–≥, —Ç.–µ. –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∫–æ–ª-–≤–µ –∏–≥—Ä–æ–∫–æ–≤
        session.launch()

    @commands.Cog.listener()
    async def on_reaction_add(self, reaction, user):
        if user == self.bot.user:
            return
        message = reaction.message
        session = self.manager.get_session(message.id)
        # –°–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ —Å–µ—Å—Å–∏—è –∏–≥—Ä—ã
        if not session:
            return

        state = await self.process_game(session=session, user=user, emoji=reaction.emoji)

        embed = discord.Embed(title="–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", description=str(session.options['grid']), colour=helper.get_discord_color('info'))

        def add_embed_pinfo(embed, players):
            embed.add_field(name="–ò–≥—Ä–æ–∫ ‚Ññ1",
                        value="<@!{}>".format(players[0].user.id))
            embed.add_field(name="–ò–≥—Ä–æ–∫ ‚Ññ2", value="–û–∂–∏–¥–∞–µ—Ç—Å—è" if not session.ready() 
            else "<@!{}>".format(players[1].user.id))
            return embed

        players = session.players

        if state == 'preparing':
            players.append(games.GamePlayer(user, emojis[len(players)]))
            embed = add_embed_pinfo(embed, players)
            if not session.full():
                embed.set_footer(text="üëÄ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...")
        elif state == 'playing':
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ —Å–ª–µ–¥ –∏–≥—Ä–æ–∫–µ
            pnext = players.current
            if pnext:
                embed.add_field(name="–¢–µ–∫—É—â–∏–π —Ö–æ–¥", value="{} ({})".format(
                    "<@!{}>".format(pnext.user.id), pnext.emoji), inline=False)
        else:
            # –ü–∞—Ä—Ç–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –º–æ–∂–Ω–æ –æ—á–∏—â–∞—Ç—å
            self.manager.remove_session(message.id)
            if state == 'won':
                winner = players.winners[0]
                embed.add_field(name="üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:", value="<@!{}>".format(winner.user.id), inline=False)
                embed.colour = helper.get_discord_color('success')
            elif state == 'draw':
                embed.add_field(name="–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", value="üçª –ù–∏—á—å—è!", inline=False)
                embed.colour = helper.get_discord_color('warning')

        await message.edit(embed=embed)

    @games.handler
    async def process_game(self, **kwargs):
        session = kwargs.get('session')
        user = kwargs.get('user')
        emoji = kwargs.get('emoji')

        grid = session.options['grid']
        # –í –∫–ª–µ—Ç–∫—É —É–∂–µ –ø–æ—Ö–æ–¥–∏–ª–∏
        if not grid.has(emoji):
            return 'playing'
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        player = session.players.find(user)
        # –¢–µ–∫—É—â–∏–π —é–∑–µ—Ä - –Ω–µ (—Ç–µ–∫—É—â–∏–π) –∏–≥—Ä–æ–∫
        if player:
            logger.info(f"Player '{player.user.name}' wanna make a move")
            if not player == session.players.current:
                logger.info("Not a current player, skipping")
                return 'playing'
        # –°–¥–≤–∏–≥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        session.players.pop()
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —è—á–µ–π–∫–æ–π
        await session.message.clear_reaction(emoji)
        # –ü–æ–º–µ—á–∞–µ–º –Ω–∞ –ø–æ–ª–µ
        grid.replace(emoji, player.emoji)
        # –ò–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª –≤—ã–π–≥—Ä—ã—à–Ω—ã–π —Ö–æ–¥
        if self.check_for_winner(session):
            session.players.set_winner(player)
            return 'won'
        # –í—Å–µ –ø–æ–ª—è –ø–æ–º–µ—á–µ–Ω—ã, –Ω–∏—á—å—è
        elif (grid.move_count == pow(grid.size, 2)):
            return 'draw'
        return 'playing'

    def check_for_winner(self, session: games.GameSession):
        for player in session.players:
            def check_matrix(matrix):
                # –ü–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                for x in range(len(matrix)):
                    for y in range(len(matrix[x])):
                        if matrix[x][y]['emoji'] != player.emoji:
                            break
                        elif y == len(matrix) - 1:
                            return True
                # –ü–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                for x in range(len(matrix)):
                    for y in range(len(matrix[x])):
                        if matrix[y][x]['emoji'] != player.emoji:
                            break
                        elif y == len(matrix) - 1:
                            return True
                # –ü–æ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
                for i in range(len(matrix)):
                    if matrix[i][i]['emoji'] != player.emoji:
                        break
                    elif i == len(matrix) - 1:
                        return True
                # –ü–æ –æ–±—Ä–∞—Ç–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
                for x in range(len(matrix)):
                    y = len(matrix)-1-x
                    if matrix[x][y]['emoji'] != player.emoji:
                        break
                    elif x == len(matrix) - 1:
                        return True

            matrix = session.options['grid'].matrix
            if check_matrix(matrix):
                return True

    @commands.Cog.listener()
    async def on_message_delete(self, message):
        self.manager.remove_session(message.id)

    async def cog_command_error(self, ctx, error):
        if isinstance(error, commands.BadArgument):
            return await ctx.send(embed=helper.get_error_embed(desc="–†–∞–∑–º–µ—Ä –ø–æ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"))
        if isinstance(error, commands.CheckAnyFailure):
            return await ctx.send(embed=helper.get_error_embed(desc="–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö"))
        logger.exception(error)


def setup(bot):
    bot.add_cog(TicTacToe(bot))
